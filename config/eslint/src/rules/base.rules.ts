import type { Linter } from 'eslint'

export const rules: Linter.RulesRecord = {
  quotes: 'off',
  semi: 'off',
  indent: 'off',
  curly: 'off',
  radix: ['error'],
  yoda: ['error'],
  camelcase: [
    'off',
    {
      properties: 'never',
      ignoreDestructuring: false,
      ignoreImports: false,
      ignoreGlobals: false,
    },
  ],
  'no-undef': 'off',
  'brace-style': 'off',
  'func-call-spacing': 'off',
  'no-array-constructor': ['off'],
  'no-extra-parens': 'off',
  'no-magic-numbers': [
    'off',
    {
      ignore: [],
      ignoreArrayIndexes: true,
      enforceConst: true,
      detectObjects: false,
    },
  ],
  'no-unused-expressions': [
    'off',
    {
      allowShortCircuit: false,
      allowTernary: false,
      allowTaggedTemplates: false,
      enforceForJSX: false,
    },
  ],
  'no-unused-vars': [
    'off',
    {
      vars: 'all',
      args: 'after-used',
      ignoreRestSiblings: true,
    },
  ],
  'no-use-before-define': [
    'off',
    {
      functions: true,
      classes: true,
      variables: true,
    },
  ],
  'class-methods-use-this': [
    'off',
    {
      exceptMethods: [
        'render',
        'getInitialState',
        'getDefaultProps',
        'getChildContext',
        'componentWillMount',
        'UNSAFE_componentWillMount',
        'componentDidMount',
        'componentWillReceiveProps',
        'UNSAFE_componentWillReceiveProps',
        'shouldComponentUpdate',
        'componentWillUpdate',
        'UNSAFE_componentWillUpdate',
        'componentDidUpdate',
        'componentWillUnmount',
        'componentDidCatch',
        'getSnapshotBeforeUpdate',
      ],
      enforceForClassFields: true,
    },
  ],
  'no-useless-constructor': ['off'],
  'no-empty-function': [
    'off',
    {
      allow: ['arrowFunctions', 'functions', 'methods'],
    },
  ],
  'no-shadow': 'off',
  'lines-around-comment': 'off',
  'max-len': 'off',
  'no-confusing-arrow': 'off',
  'no-mixed-operators': 'off',
  'no-tabs': 'off',
  'no-unexpected-multiline': 'off',
  'array-bracket-newline': 'off',
  'array-bracket-spacing': 'off',
  'array-element-newline': 'off',
  'arrow-parens': 'off',
  'arrow-spacing': 'off',
  'block-spacing': 'off',
  'comma-dangle': 'off',
  'comma-spacing': 'off',
  'comma-style': 'off',
  'computed-property-spacing': 'off',
  'dot-location': 'off',
  'eol-last': 'off',
  'function-call-argument-newline': 'off',
  'function-paren-newline': 'off',
  'generator-star': 'off',
  'generator-star-spacing': 'off',
  'implicit-arrow-linebreak': 'off',
  'jsx-quotes': 'off',
  'key-spacing': 'off',
  'keyword-spacing': 'off',
  'linebreak-style': 'off',
  'multiline-ternary': 'off',
  'newline-per-chained-call': 'off',
  'new-parens': 'off',
  'no-arrow-condition': 'off',
  'no-comma-dangle': 'off',
  'no-extra-semi': 'off',
  'no-floating-decimal': 'off',
  'no-mixed-spaces-and-tabs': 'off',
  'no-multi-spaces': 'off',
  'no-multiple-empty-lines': 'off',
  'no-reserved-keys': 'off',
  'no-space-before-semi': 'off',
  'no-trailing-spaces': 'off',
  'no-whitespace-before-property': 'off',
  'no-wrap-func': 'off',
  'nonblock-statement-body-position': 'off',
  'object-curly-newline': 'off',
  'object-curly-spacing': 'off',
  'object-property-newline': 'off',
  'one-var-declaration-per-line': 'off',
  'operator-linebreak': 'off',
  'padded-blocks': 'off',
  'quote-props': 'off',
  'rest-spread-spacing': 'off',
  'semi-spacing': 'off',
  'semi-style': 'off',
  'space-after-function-name': 'off',
  'space-after-keywords': 'off',
  'space-before-blocks': 'off',
  'space-before-function-paren': 'off',
  'space-before-function-parentheses': 'off',
  'space-before-keywords': 'off',
  'space-in-brackets': 'off',
  'space-in-parens': 'off',
  'space-infix-ops': 'off',
  'space-return-throw-case': 'off',
  'space-unary-ops': 'off',
  'space-unary-word-ops': 'off',
  'switch-colon-spacing': 'off',
  'template-curly-spacing': 'off',
  'template-tag-spacing': 'off',
  'unicode-bom': 'off',
  'wrap-iife': 'off',
  'wrap-regex': 'off',
  'yield-star-spacing': 'off',
  'standard/array-bracket-even-spacing': 'off',
  'standard/computed-property-even-spacing': 'off',
  'standard/object-curly-even-spacing': 'off',
  'unicorn/empty-brace-spaces': 'off',
  'unicorn/no-nested-ternary': 'off',
  'unicorn/number-literal-case': 'off',
  'indent-legacy': ['off'],
  'no-spaced-func': ['off'],
  'no-underscore-dangle': [
    'error',
    {
      allow: ['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__', '__typename'],
      allowAfterThis: false,
      allowAfterSuper: false,
      enforceInMethodNames: true,
      allowAfterThisConstructor: false,
      allowFunctionParams: true,
    },
  ],
  strict: ['error', 'never'],
  'arrow-body-style': [
    'error',
    'as-needed',
    {
      requireReturnForObjectLiteral: false,
    },
  ],
  'constructor-super': ['error'],
  'no-class-assign': ['error'],
  'no-const-assign': ['error'],
  'no-dupe-class-members': ['error'],
  'no-duplicate-imports': ['off'],
  'no-new-symbol': ['error'],
  'no-restricted-exports': [
    'error',
    {
      restrictedNamedExports: ['then'],
    },
  ],
  'no-restricted-imports': [
    'off',
    {
      paths: [],
      patterns: [],
    },
  ],
  'no-this-before-super': ['error'],
  'no-useless-computed-key': ['error'],
  'no-useless-rename': [
    'error',
    {
      ignoreDestructuring: false,
      ignoreImport: false,
      ignoreExport: false,
    },
  ],
  'no-var': ['error'],
  'object-shorthand': [
    'error',
    'always',
    {
      ignoreConstructors: false,
      avoidQuotes: true,
    },
  ],
  'prefer-arrow-callback': [
    'error',
    {
      allowNamedFunctions: false,
      allowUnboundThis: true,
    },
  ],
  'prefer-const': [
    'error',
    {
      destructuring: 'any',
      ignoreReadBeforeAssign: true,
    },
  ],
  'prefer-destructuring': [
    'error',
    {
      VariableDeclarator: {
        array: false,
        object: true,
      },
      AssignmentExpression: {
        array: true,
        object: false,
      },
    },
    {
      enforceForRenamedProperties: false,
    },
  ],
  'prefer-numeric-literals': ['error'],
  'prefer-reflect': ['off'],
  'prefer-rest-params': ['error'],
  'prefer-spread': ['error'],
  'prefer-template': ['error'],
  'require-yield': ['error'],
  'sort-imports': [
    'off',
    {
      ignoreCase: false,
      ignoreDeclarationSort: false,
      ignoreMemberSort: false,
      memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],
    },
  ],
  'symbol-description': ['error'],
  'init-declarations': ['off'],
  'no-catch-shadow': ['off'],
  'no-delete-var': ['error'],
  'no-label-var': ['error'],
  'no-restricted-globals': [
    'error',
    {
      name: 'isFinite',
      message:
        'Use Number.isFinite instead https://github.com/airbnb/javascript#standard-library--isfinite',
    },
    {
      name: 'isNaN',
      message:
        'Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan',
    },
    'addEventListener',
    'blur',
    'close',
    'closed',
    'confirm',
    'defaultStatus',
    'defaultstatus',
    'event',
    'external',
    'find',
    'focus',
    'frameElement',
    'frames',
    'history',
    'innerHeight',
    'innerWidth',
    'length',
    'location',
    'locationbar',
    'menubar',
    'moveBy',
    'moveTo',
    'name',
    'onblur',
    'onerror',
    'onfocus',
    'onload',
    'onresize',
    'onunload',
    'open',
    'opener',
    'opera',
    'outerHeight',
    'outerWidth',
    'pageXOffset',
    'pageYOffset',
    'parent',
    'print',
    'removeEventListener',
    'resizeBy',
    'resizeTo',
    'screen',
    'screenLeft',
    'screenTop',
    'screenX',
    'screenY',
    'scroll',
    'scrollbars',
    'scrollBy',
    'scrollTo',
    'scrollX',
    'scrollY',
    'self',
    'status',
    'statusbar',
    'stop',
    'toolbar',
    'top',
  ],
  'no-shadow-restricted-names': ['error'],
  'no-undef-init': ['error'],
  'no-undefined': ['off'],
  'capitalized-comments': [
    'off',
    'never',
    {
      line: {
        ignorePattern: '.*',
        ignoreInlineComments: true,
        ignoreConsecutiveComments: true,
      },
      block: {
        ignorePattern: '.*',
        ignoreInlineComments: true,
        ignoreConsecutiveComments: true,
      },
    },
  ],
  'consistent-this': ['off'],
  'func-name-matching': [
    'off',
    'always',
    {
      includeCommonJSModuleExports: false,
      considerPropertyDescriptor: true,
    },
  ],
  'func-names': ['warn'],
  'func-style': ['off', 'expression'],
  'id-denylist': ['off'],
  'id-length': ['off'],
  'id-match': ['off'],
  'line-comment-position': [
    'off',
    {
      position: 'above',
      ignorePattern: '',
      applyDefaultPatterns: true,
    },
  ],
  'lines-between-class-members': [
    'error',
    'always',
    {
      exceptAfterSingleLine: false,
    },
  ],
  'lines-around-directive': [
    'error',
    {
      before: 'always',
      after: 'always',
    },
  ],
  'max-depth': ['off', 4],
  'max-lines': [
    'off',
    {
      max: 300,
      skipBlankLines: true,
      skipComments: true,
    },
  ],
  'max-lines-per-function': [
    'off',
    {
      max: 50,
      skipBlankLines: true,
      skipComments: true,
      IIFEs: true,
    },
  ],
  'max-nested-callbacks': ['off'],
  'max-params': ['off', 3],
  'max-statements': ['off', 10],
  'max-statements-per-line': [
    'off',
    {
      max: 1,
    },
  ],
  'multiline-comment-style': ['off', 'starred-block'],
  'new-cap': [
    'error',
    {
      newIsCap: true,
      newIsCapExceptions: [],
      capIsNew: false,
      capIsNewExceptions: ['Immutable.Map', 'Immutable.Set', 'Immutable.List'],
      properties: true,
    },
  ],
  'newline-after-var': ['off'],
  'newline-before-return': ['off'],
  'no-bitwise': ['error'],
  'no-continue': ['error'],
  'no-inline-comments': ['off'],
  'no-lonely-if': ['error'],
  'no-multi-assign': ['error'],
  'no-negated-condition': ['off'],
  'no-nested-ternary': ['error'],
  'no-new-object': ['error'],
  'no-plusplus': ['error'],
  'no-restricted-syntax': [
    'error',
    {
      selector: 'ForInStatement',
      message:
        'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
    },
    {
      selector: 'LabeledStatement',
      message:
        'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
    },
    {
      selector: 'WithStatement',
      message:
        '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
    },
  ],
  'no-ternary': ['off'],
  'no-unneeded-ternary': [
    'error',
    {
      defaultAssignment: false,
    },
  ],
  'one-var': ['error', 'never'],
  'operator-assignment': ['error', 'always'],
  'padding-line-between-statements': ['off'],
  'prefer-exponentiation-operator': ['error'],
  'prefer-object-spread': ['error'],
  'require-jsdoc': ['off'],
  'sort-keys': [
    'off',
    'asc',
    {
      caseSensitive: false,
      natural: true,
    },
  ],
  'sort-vars': ['off'],
  'spaced-comment': [
    'error',
    'always',
    {
      line: {
        exceptions: ['-', '+'],
        markers: ['=', '!', '/'],
      },
      block: {
        exceptions: ['-', '+'],
        markers: ['=', '!', ':', '::'],
        balanced: true,
      },
    },
  ],
  'callback-return': ['off'],
  'global-require': ['off'],
  'handle-callback-err': ['off'],
  'no-buffer-constructor': ['error'],
  'no-mixed-requires': ['off', false],
  'no-new-require': ['error'],
  'no-path-concat': ['error'],
  'no-process-env': ['off'],
  'no-process-exit': ['off'],
  'no-restricted-modules': ['off'],
  'no-sync': ['off'],
  'for-direction': ['error'],
  'getter-return': [
    'error',
    {
      allowImplicit: true,
    },
  ],
  'no-async-promise-executor': ['error'],
  'no-await-in-loop': ['error'],
  'no-compare-neg-zero': ['error'],
  'no-cond-assign': ['error', 'always'],
  'no-console': ['warn'],
  'no-constant-condition': ['warn'],
  'no-control-regex': ['error'],
  'no-debugger': ['error'],
  'no-dupe-args': ['error'],
  'no-dupe-else-if': ['error'],
  'no-dupe-keys': ['error'],
  'no-duplicate-case': ['error'],
  'no-empty': ['error'],
  'no-empty-character-class': ['error'],
  'no-ex-assign': ['error'],
  'no-extra-boolean-cast': ['error'],
  'no-func-assign': ['error'],
  'no-import-assign': ['error'],
  'no-inner-declarations': ['error'],
  'no-invalid-regexp': ['error'],
  'no-irregular-whitespace': ['error'],
  'no-loss-of-precision': ['error'],
  'no-misleading-character-class': ['error'],
  'no-obj-calls': ['error'],
  'no-promise-executor-return': ['error'],
  'no-prototype-builtins': ['error'],
  'no-regex-spaces': ['error'],
  'no-setter-return': ['error'],
  'no-sparse-arrays': ['error'],
  'no-template-curly-in-string': ['error'],
  'no-unreachable': ['error'],
  'no-unreachable-loop': [
    'error',
    {
      ignore: [],
    },
  ],
  'no-unsafe-finally': ['error'],
  'no-unsafe-negation': ['error'],
  'no-unsafe-optional-chaining': [
    'error',
    {
      disallowArithmeticOperators: true,
    },
  ],
  'no-unused-private-class-members': ['off'],
  'no-useless-backreference': ['error'],
  'no-negated-in-lhs': ['off'],
  'require-atomic-updates': ['off'],
  'use-isnan': ['error'],
  'valid-jsdoc': ['off'],
  'valid-typeof': [
    'error',
    {
      requireStringLiterals: true,
    },
  ],
  'accessor-pairs': ['off'],
  'array-callback-return': [
    'error',
    {
      allowImplicit: true,
      checkForEach: false,
    },
  ],
  'block-scoped-var': ['error'],
  complexity: ['off', 20],
  'consistent-return': ['error'],
  'default-case': [
    'error',
    {
      commentPattern: '^no default$',
    },
  ],
  'default-case-last': ['error'],
  'default-param-last': ['off'],
  'dot-notation': [
    'error',
    {
      allowKeywords: true,
      allowPattern: '',
    },
  ],
  eqeqeq: [
    'error',
    'always',
    {
      null: 'ignore',
    },
  ],
  'grouped-accessor-pairs': ['error'],
  'guard-for-in': ['error'],
  'max-classes-per-file': ['error', 1],
  'no-alert': ['warn'],
  'no-caller': ['error'],
  'no-case-declarations': ['error'],
  'no-constructor-return': ['error'],
  'no-div-regex': ['off'],
  'no-else-return': [
    'error',
    {
      allowElseIf: false,
    },
  ],
  'no-empty-pattern': ['error'],
  'no-eq-null': ['off'],
  'no-eval': ['error'],
  'no-extend-native': ['error'],
  'no-extra-bind': ['error'],
  'no-extra-label': ['error'],
  'no-fallthrough': ['error'],
  'no-global-assign': [
    'error',
    {
      exceptions: [],
    },
  ],
  'no-native-reassign': ['off'],
  'no-implicit-coercion': [
    'off',
    {
      boolean: false,
      number: true,
      string: true,
      allow: [],
    },
  ],
  'no-implicit-globals': ['off'],
  'no-implied-eval': ['error'],
  'no-invalid-this': ['off'],
  'no-iterator': ['error'],
  'no-labels': [
    'error',
    {
      allowLoop: false,
      allowSwitch: false,
    },
  ],
  'no-lone-blocks': ['error'],
  'no-loop-func': ['error'],
  'no-multi-str': ['error'],
  'no-new': ['error'],
  'no-new-func': ['error'],
  'no-new-wrappers': ['error'],
  'no-nonoctal-decimal-escape': ['error'],
  'no-octal': ['error'],
  'no-octal-escape': ['error'],
  'no-param-reassign': [
    'error',
    {
      props: true,
      ignorePropertyModificationsFor: [
        'acc',
        'accumulator',
        'e',
        'ctx',
        'context',
        'req',
        'request',
        'res',
        'response',
        '$scope',
        'staticContext',
      ],
    },
  ],
  'no-proto': ['error'],
  'no-redeclare': ['error'],
  'no-restricted-properties': [
    'error',
    {
      object: 'arguments',
      property: 'callee',
      message: 'arguments.callee is deprecated',
    },
    {
      object: 'global',
      property: 'isFinite',
      message: 'Please use Number.isFinite instead',
    },
    {
      object: 'self',
      property: 'isFinite',
      message: 'Please use Number.isFinite instead',
    },
    {
      object: 'window',
      property: 'isFinite',
      message: 'Please use Number.isFinite instead',
    },
    {
      object: 'global',
      property: 'isNaN',
      message: 'Please use Number.isNaN instead',
    },
    {
      object: 'self',
      property: 'isNaN',
      message: 'Please use Number.isNaN instead',
    },
    {
      object: 'window',
      property: 'isNaN',
      message: 'Please use Number.isNaN instead',
    },
    {
      property: '__defineGetter__',
      message: 'Please use Object.defineProperty instead.',
    },
    {
      property: '__defineSetter__',
      message: 'Please use Object.defineProperty instead.',
    },
    {
      object: 'Math',
      property: 'pow',
      message: 'Use the exponentiation operator (**) instead.',
    },
  ],
  'no-return-assign': ['error', 'always'],
  'no-return-await': ['error'],
  'no-script-url': ['error'],
  'no-self-assign': [
    'error',
    {
      props: true,
    },
  ],
  'no-self-compare': ['error'],
  'no-sequences': ['error'],
  'no-throw-literal': ['error'],
  'no-unmodified-loop-condition': ['off'],
  'no-unused-labels': ['error'],
  'no-useless-call': ['off'],
  'no-useless-catch': ['error'],
  'no-useless-concat': ['error'],
  'no-useless-escape': ['error'],
  'no-useless-return': ['error'],
  'no-void': ['error'],
  'no-warning-comments': [
    'off',
    {
      terms: ['todo', 'fixme', 'xxx'],
      location: 'start',
    },
  ],
  'no-with': ['error'],
  'prefer-promise-reject-errors': [
    'error',
    {
      allowEmptyReject: true,
    },
  ],
  'prefer-named-capture-group': ['off'],
  'prefer-regex-literals': [
    'error',
    {
      disallowRedundantWrapping: true,
    },
  ],
  'require-await': ['off'],
  'require-unicode-regexp': ['off'],
  'vars-on-top': ['error'],
}
